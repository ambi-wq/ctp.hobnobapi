
"""
Django settings for hobnob project.

Generated by 'django-admin startproject' using Django 3.0.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import sys
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


sentry_sdk.init(
    dsn="https://6f8e75a00fba4d82b4ef731525157c50@o410656.ingest.sentry.io/5284825",
    integrations=[DjangoIntegration(
        transaction_style='url',
    )],
    traces_sample_rate=1.0,

    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    # send_default_pii=True
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '4$(__%)q#^)js4sy4$3n71g$tinoy8og5w%vbwbeuj8y4*o*op'

# SECURITY WARNING: don't run with debug turned on in production!
if 'USER' in os.environ:
    DEBUG = False
    ALLOWED_HOSTS = ['api.hobnobco.com', 'hobnobco.com', '15.206.69.139']
else:
    DEBUG = True
    ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.gis',
    'rest_framework',
    'rest_framework.authtoken',
    'rest_firebase_auth',
    'channels',
    'userprofile.apps.UserprofileConfig',
    'events.apps.EventsConfig',
    'matching.apps.MatchingConfig',
    'chatting.apps.ChattingConfig',
    'silk',
    'notifications',
    'api_doc',
    'admin_honeypot',
    'schema_graph',
]

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
        'rest_firebase_auth.authentication.FirebaseAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_RENDERER_CLASSES': (
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.NamespaceVersioning',
    'DEFAULT_THROTTLE_CLASSES': [
        'rest_framework.throttling.AnonRateThrottle',
        'rest_framework.throttling.UserRateThrottle'
    ],
    'DEFAULT_THROTTLE_RATES': {
        'anon': '10/day',
        'user': '60/minute'
    }
}

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'silk.middleware.SilkyMiddleware',
]

ROOT_URLCONF = 'hobnob.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'APP_DIRS': True,
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'hobnob.wsgi.application'
ASGI_APPLICATION = 'hobnob.routing.application'

# if 'USER' in os.environ:
#     CHANNEL_LAYERS = {
#         'default': {
#             'BACKEND': 'channels_redis.core.RedisChannelLayer',
#             'CONFIG': {
#                 "hosts": [('127.0.0.1', 6379)],
#             },
#         },
#     }
# else:
#     CHANNEL_LAYERS = {
#         "default": {
#             "BACKEND": "channels.layers.InMemoryChannelLayer"
#         }
#     }
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels.layers.InMemoryChannelLayer"
    }
}

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases


if 'RDS_HOSTNAME' in os.environ:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': os.environ['RDS_DB_NAME'],
            'USER': os.environ['RDS_USERNAME'],
            'PASSWORD': os.environ['RDS_PASSWORD'],
            'HOST': os.environ['RDS_HOSTNAME'],
            'PORT': os.environ['RDS_PORT'],
        }
    }
elif 'USER' in os.environ:
    if os.environ.get('DEV_TYPE') == 'dev_rahul' and os.environ['USER'] == 'ubuntu':
        DATABASES = {
            'default': {
                'ENGINE': 'django.contrib.gis.db.backends.postgis',
                'NAME': 'postgres',
                'USER': 'hobnob_admin',
                'PASSWORD': 'hobnobaum',
                'HOST': 'hobnobdb.c3kvi2cb9qld.us-east-2.rds.amazonaws.com',
                'PORT': '5432',
            }
        }
    elif os.environ['USER'] == 'ubuntu':
        DATABASES = {
            'default': {
                'ENGINE': 'django.contrib.gis.db.backends.postgis',
                'NAME': 'postgres',
                'USER': 'hobnob_admin',
                'PASSWORD': 'hobnobaum',
                'HOST': 'hobnobdb.c3kvi2cb9qld.us-east-2.rds.amazonaws.com',
                'PORT': '5432',
            }
        }

else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.contrib.gis.db.backends.postgis',
            'NAME': 'hob_nob',
            'USER': 'hobnob',
            'PASSWORD': '@!hobnob@!',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }
    # if 'test' in sys.argv or 'test_coverage' in sys.argv:
    # DATABASES = {
    #     'default': {
    #         'ENGINE': 'django.contrib.gis.db.backends.spatialite',
    #         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    #     }
    # }
    # DATABASES = {
    #     'default': {
    #         'ENGINE': 'django.contrib.gis.db.backends.postgis',
    #         'NAME': 'hob_nob',
    #         'USER': 'hobnob',
    #         'PASSWORD': '@!hobnob@!',
    #         'HOST': 'localhost',
    #         'PORT': '5432',
    #     }
    # }
    # else:
    # DATABASES = {
    #     'default': {
    #         'ENGINE': 'django.contrib.gis.db.backends.spatialite',
    #         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    #     },
    # }
    # DATABASES = {
    #     'default': {
    #         'ENGINE': 'django.contrib.gis.db.backends.postgis',
    #         'NAME': 'hob_nob',
    #         'USER': 'hobnob',
    #         'PASSWORD': '@!hobnob@!',
    #         'HOST': 'localhost',
    #         'PORT': '5432',
    #     }
    # }

    # DATABASES = {
    #     'default': {
    #         'ENGINE': 'django.db.backends.sqlite3',
    #         'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    #     }
    # }

    # Password validation
    # https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators



AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Kolkata'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "static"),
]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles/')

DATA_UPLOAD_MAX_MEMORY_SIZE = 15728640
FILE_UPLOAD_MAX_MEMORY_SIZE = 15728640


FIREBASE_KEY = 'serviceAccountKey.json'

REST_FIREBASE_AUTH = {
    'FIREBASE_SERVICE_ACCOUNT_KEY': 'credentials/' + FIREBASE_KEY,
    # allow creation of new local user in db
    'FIREBASE_CREATE_LOCAL_USER': True,
    # attempt to split firebase user.display_name and set local user
    # first_name and last_name
    'FIREBASE_ATTEMPT_CREATE_WITH_DISPLAY_NAME': True,
    # commonly JWT or Bearer (e.g. JWT <token>)
    'FIREBASE_AUTH_HEADER_PREFIX': 'JWT',
    # verify that JWT has not been revoked
    'FIREBASE_CHECK_JWT_REVOKED': True,
    # require that firebase user.email_verified is True
    'FIREBASE_AUTH_EMAIL_VERIFICATION': False
}

# HObonob Server AKIAZU3S4EYOT52NN4NE
# L9NvuIRInkcFU5B6OV293h7M/c4FvabowvezhVwB
# hobnob-app
#
# AWS_ACCESS_KEY_ID = 'AKIAUAP7CO7FU5WM6FX5'
# AWS_SECRET_ACCESS_KEY = '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'
# AWS_STORAGE_BUCKET_NAME = 'hobnob-aum'
AWS_ACCESS_KEY_ID = 'AKIAZU3S4EYOT52NN4NE'
AWS_SECRET_ACCESS_KEY = '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'
AWS_STORAGE_BUCKET_NAME = 'hobnob-app'
AWS_S3_REGION_NAME = 'ap-south-1'
AWS_S3_FILE_OVERWRITE = False
AWS_DEFAULT_ACL = None
AWS_S3_SIGNATURE_VERSION = 's3v4'
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# arn:aws:s3:us-east-2:275949713355:my_corporate_bucket/*

# Instagram Credentials
INSTA_APP_ID = '576239349748743'
INSTA_APP_SECRET = 'da33e01ca729c6f2cdde17faa968a56b'
INSTAGRAM_ROOT_URL = 'https://graph.instagram.com'

# Spotify Credentials
SPOTIFY_CLIENT_ID = '4fba1cc0393f4bbfbcbd3fd959eae83d'
SPOTIFY_CLIENT_SECRET = 'cbb1af2a46c34649b7be2081575ba1e9'
SPOTIFY_ROOT_URL = 'https://accounts.spotify.com'

# SILKy Variables
# SILKY_PYTHON_PROFILER = True
SILKY_AUTHENTICATION = True  # User must login
# SILKY_AUTHORISATION = True  # User must have permissions


# Logging Error and Events

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[%(server_time)s] %(message)s',
        }
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'filters': ['require_debug_true'],
            'class': 'logging.StreamHandler',
        },
        'console_debug_false': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'logging.StreamHandler',
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'file': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': '../../debug.log',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'console_debug_false', 'file'],
            'level': 'WARNING',
        },
        'django.server': {
            'handlers': ['django.server', 'file'],
            'level': 'INFO',
            'propagate': False,
        }
    }
}
